{"remainingRequest":"/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brandonmcghee/Repositories/greybuilt-production/src/admin/EditProject.vue?vue&type=template&id=7849b674&","dependencies":[{"path":"/Users/brandonmcghee/Repositories/greybuilt-production/src/admin/EditProject.vue","mtime":1618176681783},{"path":"/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/brandonmcghee/Repositories/greybuilt-production/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}